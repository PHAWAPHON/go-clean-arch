// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)


type PDFService struct {
	mock.Mock
}


func (_m *PDFService) Merge(ctx context.Context, files []string, output string) error {
	ret := _m.Called(ctx, files, output)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) error); ok {
		r0 = rf(ctx, files, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *PDFService) Split(ctx context.Context, file string, outputDir string) error {
	ret := _m.Called(ctx, file, outputDir)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, file, outputDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *PDFService) Compress(ctx context.Context, file string, output string) error {
	ret := _m.Called(ctx, file, output)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, file, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func NewPDFService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PDFService {
	mockService := &PDFService{}
	mockService.Mock.Test(t)
	t.Cleanup(func() { mockService.AssertExpectations(t) })
	return mockService
}
